[{"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js":"1","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js":"2","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js":"3","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js":"4","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js":"5","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js":"6","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js":"7","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js":"8","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js":"9","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js":"10","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js":"11","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js":"12"},{"size":431,"mtime":1607242271000,"results":"13","hashOfConfig":"14"},{"size":21873,"mtime":1607391801000,"results":"15","hashOfConfig":"14"},{"size":704,"mtime":1607384333000,"results":"16","hashOfConfig":"14"},{"size":913,"mtime":1607242304000,"results":"17","hashOfConfig":"14"},{"size":411,"mtime":1607242316000,"results":"18","hashOfConfig":"14"},{"size":60,"mtime":1607242321000,"results":"19","hashOfConfig":"14"},{"size":159,"mtime":1607243884000,"results":"20","hashOfConfig":"14"},{"size":641,"mtime":1607384111000,"results":"21","hashOfConfig":"14"},{"size":160,"mtime":1607322260000,"results":"22","hashOfConfig":"14"},{"size":159,"mtime":1607324962000,"results":"23","hashOfConfig":"14"},{"size":159,"mtime":1607325120000,"results":"24","hashOfConfig":"14"},{"size":169,"mtime":1607383894000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"x9v8x",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"28"},"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js",[],["59","60"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js",["61"],"import React from 'react';\nimport axios from 'axios';\nimport './index.css';\n\nimport { connect } from 'react-redux';\nimport {\n  setOnSort,\n  setBubbleColor,\n  setQuickColor,\n  setMergeColor,\n  // buttonColor,\n} from '../actions';\nimport Loading from './Loading';\nimport BarGraph from './BarGraph';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n      state: '',\n      resultArrayOriginal: [],\n      resultArray: [],\n      // bubbleColor: '',\n      // quickColor: '',\n      // mergeColor: '',\n      // onSort: false,\n      buttonColor: '',\n      loading: false,\n      locationSubmitted: false,\n      initialData: false,\n      message: 'Please enter location',\n      error: false,\n    };\n  }\n\n  resetSort = e => {\n    let self = this;\n    console.log('on sort reset');\n    // if (this.state.onSort === false) {\n    if (this.props.onSort === false) {\n      const resultArrayCopy = JSON.parse(\n        JSON.stringify(self.state.resultArrayOriginal)\n      );\n      console.log(resultArrayCopy);\n      self.setState({\n        resultArray: resultArrayCopy,\n\n        // bubbleColor: '',\n        // quickColor: '',\n        // mergeColor: '',\n      });\n\n      this.props.setBubbleColor('');\n      this.props.setQuickColor('');\n      this.props.setMergeColor('');\n    }\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    var self = this;\n    // if (this.state.onSort === false) {\n    if (this.props.onSort === false) {\n      let resultArrayFetch = [];\n      let { city, state } = this.state;\n\n      if (city && state) {\n        city = city.replace(' ', '+');\n        // console.log(\"city: \" + city + \"State:\" + state);\n\n        let totalValue = 0;\n        let count = 0;\n        this.props.setMergeColor('');\n        this.props.setBubbleColor('');\n        this.props.setQuickColor('');\n        this.setState(\n          {\n            loading: true,\n            // bubbleColor: '',\n            // quickColor: '',\n            // mergeColor: '',\n          },\n          () => {\n            axios\n              .get(\n                'https://jobdataapi.emlin.repl.co/jobSkillsData/' +\n                  city +\n                  '/' +\n                  state\n              )\n              .then(function(response) {\n                response = response.data;\n                Object.values(response).forEach(function(value) {\n                  totalValue += value;\n                });\n                for (const [key, value] of Object.entries(response)) {\n                  let keyResult = key;\n                  let percentage = ((value / totalValue) * 100).toFixed(2);\n\n                  //push count to later use as key\n                  resultArrayFetch.push([keyResult, percentage, count]);\n                  count++;\n                }\n                if (resultArrayFetch.length < 10 || !resultArrayFetch) {\n                  self.setState({\n                    message:\n                      'Cannot find input location, please enter valid city and state',\n                    loading: false,\n                    error: true,\n                  });\n                } else {\n                  resultArrayFetch.forEach((element, index) => {\n                    let percent = element[1];\n                    element[1] = parseFloat(percent);\n\n                    //push 0 to every element, later will use to update color of bar during sort\n                    element.push(0);\n                  });\n                  const resultArrayCopy = JSON.parse(\n                    JSON.stringify(resultArrayFetch)\n                  );\n\n                  self.setState({\n                    loading: false,\n                    resultArrayOriginal: resultArrayCopy,\n                    resultArray: resultArrayFetch,\n                    locationSubmitted: true,\n                    initialData: true,\n                    error: false,\n                  });\n                }\n              });\n          }\n        );\n      } else {\n        self.setState({\n          message: 'Please enter valid city and state',\n          error: true,\n        });\n      }\n    }\n  };\n\n  bubbleSort = () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      this.props.onSort === false &&\n      this.state.locationSubmitted === true\n    ) {\n      this.setState({\n        // bubbleColor: '#f08a5d',\n        // onSort: true,\n        buttonColor: '#00587a',\n      });\n      this.props.setBubbleColor('#f08a5d');\n      this.props.setOnSort(true);\n\n      console.log('on bubblesort');\n\n      let self = this;\n      let count = 0;\n      let round = 0;\n      //flag indicates whether a bar has been swapped during this round\n\n      let flag = true;\n      let endFlag = false;\n\n      let myInterval = setInterval(() => {\n        if (count === 0) {\n        }\n        function swap(input, indexA, indexB) {\n          flag = false;\n          let temp = input[indexA];\n          input[indexA] = input[indexB];\n          input[indexB] = temp;\n          return input;\n        }\n\n        if (endFlag === true || count === 9) {\n          let dataArray = self.state.resultArray;\n          if (dataArray[8][1] > dataArray[9][1]) {\n            swap(dataArray, 8, 9);\n            self.setState({\n              resultArray: dataArray,\n            });\n          }\n\n          if (round < 9) {\n            dataArray[9 - round][3] = 2;\n            dataArray[9 - round - 1][3] = 0;\n          } else {\n            dataArray[9 - round][3] = 2;\n          }\n\n          self.setState({\n            resultArray: dataArray,\n          });\n          round++;\n          //if at the end of the array and no swaps, all items are sorted\n          if (flag === true) {\n            let dataArray = self.state.resultArray;\n            //Update each bar color to green\n            dataArray.forEach(element => {\n              element[3] = 2;\n            });\n            self.setState({\n              resultArray: dataArray,\n              // onSort: false,\n              buttonColor: '#fff',\n            });\n            this.props.setOnSort(false);\n            clearInterval(myInterval);\n          } else {\n            count = 0;\n            flag = true;\n          }\n          endFlag = false;\n          return;\n        } else {\n          let dataArray = self.state.resultArray;\n          if (count === 0) {\n            //if first count, have to color first two yellow\n            dataArray[0][3] = 1;\n            dataArray[1][3] = 1;\n            self.setState({\n              resultArray: dataArray,\n            });\n            count++;\n          } else {\n            if (dataArray[count - 1][1] > dataArray[count][1]) {\n              swap(dataArray, count - 1, count);\n              self.setState({\n                resultArray: dataArray,\n              });\n            } else {\n              if (dataArray[count + 1][3] !== 2) {\n                //if the next one isn't green/already sorted, continue\n                dataArray[count - 1][3] = 0;\n                dataArray[count + 1][3] = 1;\n                self.setState({\n                  resultArray: dataArray,\n                });\n              } else if (dataArray[count + 1][3] === 2) {\n                endFlag = true;\n              }\n              count++;\n            }\n          }\n        }\n      }, 140);\n    }\n  };\n\n  quickSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      this.props.onSort === false &&\n      this.state.locationSubmitted === true\n    ) {\n      this.setState({\n        // quickColor: '#f08a5d',\n        // onSort: true,\n        buttonColor: '#00587a',\n      });\n      this.props.setQuickColor('#f08a5d');\n      this.props.setOnSort(true);\n      console.log('on quicksort');\n\n      let self = this;\n\n      //https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function swap(input, indexA, indexB) {\n        await sleep(170);\n        let temp = input[indexA];\n        input[indexA] = input[indexB];\n        input[indexB] = temp;\n\n        return input;\n      }\n\n      //changeColors function, enter index to change color and number of color\n      //updates state with the new bar colors\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][3] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      //resets the color of the bar to blue, updates state\n      async function resetColor(endIndex) {\n        let dataArray = self.state.resultArray;\n        dataArray[endIndex][3] = 0;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(0.1);\n      }\n\n      async function getPivotIndex(array, startIndex, endIndex) {\n        let pivotValue = array[endIndex][1];\n\n        let pivotIndex = startIndex;\n        await changeColors(endIndex, 3);\n\n        for (let i = startIndex; i < endIndex; i++) {\n          let startPivotIndex = pivotIndex;\n\n          //changes bar colors\n          await Promise.all([changeColors(i, 2), changeColors(pivotIndex, 1)]);\n\n          if (array[i][1] < pivotValue) {\n            if (i === pivotIndex) {\n              //if on first index, reset the color and increase pivot index\n\n              await resetColor(i);\n              pivotIndex++;\n            } else {\n              //change colors if not on the first index\n              //change to red\n\n              await Promise.all([\n                changeColors(i, 4),\n                changeColors(pivotIndex, 4),\n              ]);\n              await swap(array, i, pivotIndex);\n\n              //after swap, update colors\n              await Promise.all([\n                changeColors(i, 2),\n                changeColors(pivotIndex, 2),\n              ]);\n\n              //reset the colors after and increase pivot index\n              await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n              pivotIndex++;\n            }\n          }\n\n          //reset colors before returning pivot index\n          if (startPivotIndex !== pivotIndex) {\n            await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n          } else {\n            await resetColor(i);\n          }\n        }\n\n        if (pivotIndex !== endIndex) {\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await swap(array, pivotIndex, endIndex);\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await Promise.all([resetColor(pivotIndex), resetColor(endIndex)]);\n        }\n\n        //return the pivot index\n        return pivotIndex;\n      }\n\n      async function quickSortAlgorithm(array, startingIndex, endingIndex) {\n        if (startingIndex > endingIndex) {\n          return;\n        } else {\n          let index = await getPivotIndex(array, startingIndex, endingIndex);\n\n          await Promise.all([\n            quickSortAlgorithm(array, startingIndex, index - 1),\n            quickSortAlgorithm(array, index + 1, endingIndex),\n          ]);\n        }\n      }\n\n      let dataArray = this.state.resultArray;\n      await quickSortAlgorithm(dataArray, 0, 9).then(async () => {\n        //pause, and then change colors to green\n        setTimeout(() => {\n          dataArray.forEach((bar, barIndex) => {\n            bar[3] = 2;\n          });\n          self.setState({\n            resultArray: dataArray,\n            // onSort: false,\n            buttonColor: '#fff',\n          });\n          this.props.setOnSort(false);\n        }, 170);\n      });\n    }\n  };\n\n  mergeSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      // this.state.quickColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      this.props.onSort === false &&\n      this.state.locationSubmitted === true\n    ) {\n      this.setState({\n        // mergeColor: '#f08a5d',\n        // onSort: true,\n        buttonColor: '#00587a',\n      });\n      this.props.setOnSort(true);\n      this.props.setMergeColor('#f08a5d');\n      console.log('on mergesort');\n\n      let self = this;\n\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][3] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n        await sleep(170);\n      }\n\n      async function changeSingleColor(item, number) {\n        let dataArray = self.state.resultArray;\n\n        //find where the item is in dataArray\n        let index = dataArray.indexOf(item);\n        dataArray[index][3] = number;\n\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      async function mergeSortAlgorithm(array) {\n        if (array.length <= 1) {\n          return array;\n        }\n\n        let middlePoint = Math.floor(array.length / 2),\n          leftArray = await mergeSortAlgorithm(array.slice(0, middlePoint)),\n          rightArray = await mergeSortAlgorithm(array.slice(middlePoint));\n\n        let mergeResult = await merge(leftArray, rightArray);\n\n        return mergeResult;\n      }\n\n      async function merge(arrayA, arrayB) {\n        if (arrayA.length > 0 && arrayB.length > 0) {\n          let arrayAIndex = arrayA[0][0];\n          let lengthTotal = arrayA.length + arrayB.length;\n          let sorted = [];\n          let dataArray = self.state.resultArray;\n          let dataArrayCopy = dataArray;\n          let indexA = 0;\n\n          //identify first where we are in dataArray, set it to be indexA\n          dataArray.forEach((element, index) => {\n            if (element[0] === arrayAIndex) {\n              indexA = index;\n              return;\n            }\n          });\n\n          //change the color of arrays so we can identify the left from right\n          //arrayA = yellow, arrayB = purple\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 1);\n            }),\n          ]);\n          await Promise.all([\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 3);\n            }),\n          ]);\n\n          await sleep(370);\n          while (arrayA.length && arrayB.length) {\n            let dataArray = self.state.resultArray;\n            let dataArrayCopy = dataArray;\n\n            await Promise.all([\n              changeSingleColor(arrayA[0], 4),\n              changeSingleColor(arrayB[0], 4),\n            ]);\n\n            if (arrayA[0][1] < arrayB[0][1]) {\n              sorted.push(arrayA.shift());\n            } else {\n              sorted.push(arrayB.shift());\n            }\n\n            let resultMergeArray = sorted.concat(\n              arrayA.slice().concat(arrayB.slice())\n            );\n\n            //merge the sorte with the entire dataArray\n            let resultMergeReturn = dataArray\n              .slice(0, indexA)\n              .concat(resultMergeArray)\n              .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n\n            self.setState({\n              resultArray: resultMergeReturn,\n            });\n\n            //change colors for the next loop\n\n            await Promise.all([\n              arrayA.forEach((element, index) => {\n                changeSingleColor(element, 1);\n              }),\n            ]);\n            await Promise.all([\n              arrayB.forEach((element, index) => {\n                changeSingleColor(element, 3);\n              }),\n            ]);\n          }\n\n          //create new updated array\n          let resultMergeArray = sorted.concat(\n            arrayA.slice().concat(arrayB.slice())\n          );\n\n          let resultMergeReturn = dataArray\n            .slice(0, indexA)\n            .concat(resultMergeArray)\n            .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n          self.setState({\n            resultArray: resultMergeReturn,\n          });\n\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            sorted.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n          ]);\n\n          return resultMergeArray;\n        } else {\n          return;\n        }\n      }\n\n      let dataArray = self.state.resultArray;\n      dataArray = await mergeSortAlgorithm(dataArray);\n\n      //update all bar colors to green at end\n      await Promise.all([\n        dataArray.forEach((element, index) => {\n          changeColors(index, 2);\n        }),\n      ]);\n      self.setState({\n        // onSort: false,\n        buttonColor: '#fff',\n      });\n      this.props.setOnSort(false);\n    }\n  };\n\n  render() {\n    const { city, state } = this.state;\n    var self = this;\n    return (\n      <div className='container'>\n        <div className='controls-container'>\n          <div className='controls'>\n            <div className='info-container'>\n              <h1>Job Skills Data Analysis</h1>\n              <p>\n                This app analyzes and compares the percentage of job openings\n                for several of the most popular programming languages per\n                location. Enter a city and state to retrieve the location's\n                data. Next, choose a sorting algorithm to visually sort the\n                data!\n              </p>\n            </div>\n\n            <div>\n              <div>\n                <h2>Location</h2>\n              </div>\n\n              <form onSubmit={this.onSubmit}>\n                <div className='location-container'>\n                  <div>\n                    <label>City:</label>\n\n                    <input\n                      type='text'\n                      name='city'\n                      className='input-text'\n                      value={city}\n                      onChange={this.onChange}\n                    />\n                  </div>\n\n                  {/* <br /> */}\n                  <div>\n                    <label>State:</label>\n\n                    <input\n                      type='text'\n                      name='state'\n                      className='input-text'\n                      value={state}\n                      onChange={this.onChange}\n                    />\n                  </div>\n\n                  <div>\n                    <div className='buttonHolder'>\n                      <button\n                        className='btn'\n                        style={{ color: this.state.buttonColor }}\n                      >\n                        Submit Location\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n\n            <div className='algorithms-container'>\n              <div>\n                <h2>Sorting Algorithm</h2>\n              </div>\n              <div>\n                <button\n                  onClick={self.bubbleSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.bubbleColor }}\n                >\n                  Bubble Sort\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={self.quickSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.quickColor }}\n                >\n                  Quick Sort\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={self.mergeSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.mergeColor }}\n                >\n                  Merge Sort\n                </button>\n              </div>\n\n              <div className='buttonHolder'>\n                <button\n                  className='btn'\n                  style={{ color: this.state.buttonColor }}\n                  onClick={self.resetSort}\n                >\n                  Reset Sort\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className='barGraph-container'>\n          {this.state.initialData === false ||\n          this.state.error === true ||\n          (this.state.initialData === true && this.state.loading === true) ? (\n            <Loading\n              loading={this.state.loading}\n              message={this.state.message}\n            />\n          ) : (\n            <BarGraph resultArray={this.state.resultArray} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    onSort: state.onSort,\n    bubbleColor: state.bubbleColor,\n    quickColor: state.quickColor,\n    mergeColor: state.mergeColor,\n  };\n};\n// ReactDOM.render(<App />, document.querySelector('#root'));\n\nexport default connect(mapStateToProps, {\n  setOnSort,\n  setBubbleColor,\n  setMergeColor,\n  setQuickColor,\n})(App);\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js",["62"],"export default (state = [], action) => {\n  return state;\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js",["63"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'ON_SORT':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js",[],["64","65"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js",["66"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'BUBBLE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js",["67"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'QUICK_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js",["68"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'MERGE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js",["69"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'LOCATION_SUBMITTED':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":11,"column":3,"nodeType":"76","messageId":"77","endLine":11,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":3,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":9,"endColumn":3},{"ruleId":"70","replacedBy":"81"},{"ruleId":"72","replacedBy":"82"},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":8,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":8,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":8,"endColumn":3},{"ruleId":"78","severity":1,"message":"79","line":1,"column":1,"nodeType":"80","endLine":8,"endColumn":3},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'buttonColor' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["83"],["84"],"no-global-assign","no-unsafe-negation"]