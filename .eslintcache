[{"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js":"1","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js":"2","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js":"3","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js":"4","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js":"5","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js":"6","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js":"7","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js":"8","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js":"9","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js":"10","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js":"11","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js":"12","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/api/jobData.js":"13","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/cityLocationReducer.js":"14","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/stateLocationReducer.js":"15","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Controls.js":"16","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/InfoControls.js":"17","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BubbleSort.js":"18","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/MergeSort.js":"19"},{"size":431,"mtime":1607242271000,"results":"20","hashOfConfig":"21"},{"size":25428,"mtime":1607495025000,"results":"22","hashOfConfig":"21"},{"size":896,"mtime":1607485055000,"results":"23","hashOfConfig":"21"},{"size":826,"mtime":1607493825000,"results":"24","hashOfConfig":"21"},{"size":411,"mtime":1607242316000,"results":"25","hashOfConfig":"21"},{"size":1321,"mtime":1607481130000,"results":"26","hashOfConfig":"21"},{"size":159,"mtime":1607243884000,"results":"27","hashOfConfig":"21"},{"size":1468,"mtime":1607418906000,"results":"28","hashOfConfig":"21"},{"size":160,"mtime":1607322260000,"results":"29","hashOfConfig":"21"},{"size":159,"mtime":1607324962000,"results":"30","hashOfConfig":"21"},{"size":159,"mtime":1607485055000,"results":"31","hashOfConfig":"21"},{"size":169,"mtime":1607393865000,"results":"32","hashOfConfig":"21"},{"size":124,"mtime":1607393013000,"results":"33","hashOfConfig":"21"},{"size":161,"mtime":1607393857000,"results":"34","hashOfConfig":"21"},{"size":162,"mtime":1607393927000,"results":"35","hashOfConfig":"21"},{"size":107,"mtime":1607486571000,"results":"36","hashOfConfig":"21"},{"size":493,"mtime":1607487718000,"results":"37","hashOfConfig":"21"},{"size":5727,"mtime":1607492973000,"results":"38","hashOfConfig":"21"},{"size":7777,"mtime":1607493754000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"x9v8x",{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js",[],["88","89"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js",["90","91","92","93"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js",["94"],"const initialState = {\n  jobData: [],\n  loading: false,\n  error: false,\n  locationSubmitted: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOGGLE_LOADING':\n      return {\n        ...state,\n        loading: !state.loading,\n      };\n    case 'STORE_VALUE':\n      let response = { ...action.payload };\n\n      let totalNumberOfJobs = 0;\n      let resultArrayFetch = [];\n\n      Object.values(response).forEach(function(value) {\n        totalNumberOfJobs += value;\n      });\n\n      for (const [key, value] of Object.entries(response)) {\n        let keyResult = key;\n        let percentage = ((value / totalNumberOfJobs) * 100).toFixed(2);\n        resultArrayFetch.push([keyResult, percentage]);\n      }\n\n      resultArrayFetch.forEach((element, index) => {\n        let percent = element[1];\n        element[1] = parseFloat(percent);\n\n        element.push(0);\n      });\n      const resultArrayCopy = JSON.parse(JSON.stringify(resultArrayFetch));\n\n      return {\n        jobData: [...resultArrayCopy],\n        loading: false,\n        error: false,\n        locationSubmitted: true,\n      };\n    case 'ERROR_FETCHING':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n        locationSubmitted: false,\n      };\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js",["95"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'ON_SORT':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js",["96"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'BUBBLE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js",["97"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'QUICK_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js",["98"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'MERGE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js",["99"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'LOCATION_SUBMITTED':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/api/jobData.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/cityLocationReducer.js",["100"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'CITY_LOCATION':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/stateLocationReducer.js",["101"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'STATE_LOCATION':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Controls.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/InfoControls.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BubbleSort.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/MergeSort.js",["102"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  setOnSort,\n  setBubbleColor,\n  //   setQuickColor,\n  setMergeColor,\n  //   setCityLocation,\n  //   setStateLocation,\n  //   setMessage,\n  //   fetchJobData,\n  setButtonColor,\n} from '../actions';\n\nconst MergeSort = props => {\n  const startMergeSort = async () => {\n    if (\n      props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      // this.state.quickColor === '' &&\n      props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      props.onSort === false &&\n      props.locationSubmitted === true\n    ) {\n      //   this.setState({\n      //     // mergeColor: '#f08a5d',\n      //     // onSort: true,\n      //     buttonColor: '#00587a',\n      //   });\n      props.setOnSort(true);\n      props.setMergeColor('#f08a5d');\n      props.setButtonColor('#00587a');\n      console.log('on mergesort');\n\n      let self = this;\n\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function changeColors(index, number) {\n        // let dataArray = self.state.resultArray;\n        let dataArray = [...props.resultArray];\n        dataArray[index][3] = number;\n        // self.setState({\n        //   resultArray: dataArray,\n        // });\n        props.updateGraph(dataArray);\n        await sleep(170);\n      }\n\n      async function changeSingleColor(item, number) {\n        // let dataArray = self.state.resultArray;\n        let dataArray = [...props.resultArray];\n        //find where the item is in dataArray\n        let index = dataArray.indexOf(item);\n        dataArray[index][3] = number;\n\n        // self.setState({\n        //   resultArray: dataArray,\n        // });\n\n        props.updateGraph(dataArray);\n        await sleep(170);\n      }\n\n      async function mergeSortAlgorithm(array) {\n        if (array.length <= 1) {\n          return array;\n        }\n\n        let middlePoint = Math.floor(array.length / 2),\n          leftArray = await mergeSortAlgorithm(array.slice(0, middlePoint)),\n          rightArray = await mergeSortAlgorithm(array.slice(middlePoint));\n\n        let mergeResult = await merge(leftArray, rightArray);\n\n        return mergeResult;\n      }\n\n      async function merge(arrayA, arrayB) {\n        if (arrayA.length > 0 && arrayB.length > 0) {\n          let arrayAIndex = arrayA[0][0];\n          let lengthTotal = arrayA.length + arrayB.length;\n          let sorted = [];\n          //   let dataArray = self.state.resultArray;\n          let dataArray = [...props.resultArray];\n          let dataArrayCopy = [...dataArray];\n          let indexA = 0;\n\n          //identify first where we are in dataArray, set it to be indexA\n          dataArray.forEach((element, index) => {\n            if (element[0] === arrayAIndex) {\n              indexA = index;\n              return;\n            }\n          });\n\n          //change the color of arrays so we can identify the left from right\n          //arrayA = yellow, arrayB = purple\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 1);\n            }),\n          ]);\n          await Promise.all([\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 3);\n            }),\n          ]);\n\n          await sleep(370);\n          while (arrayA.length && arrayB.length) {\n            // let dataArray = self.state.resultArray;\n            let dataArray = [...props.resultArray];\n            let dataArrayCopy = dataArray;\n\n            await Promise.all([\n              changeSingleColor(arrayA[0], 4),\n              changeSingleColor(arrayB[0], 4),\n            ]);\n\n            if (arrayA[0][1] < arrayB[0][1]) {\n              sorted.push(arrayA.shift());\n            } else {\n              sorted.push(arrayB.shift());\n            }\n\n            let resultMergeArray = sorted.concat(\n              arrayA.slice().concat(arrayB.slice())\n            );\n\n            //merge the sorte with the entire dataArray\n            let resultMergeReturn = dataArray\n              .slice(0, indexA)\n              .concat(resultMergeArray)\n              .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n\n            // self.setState({\n            //   resultArray: resultMergeReturn,\n            // });\n\n            props.updateGraph(resultMergeReturn);\n            //change colors for the next loop\n\n            await Promise.all([\n              arrayA.forEach((element, index) => {\n                changeSingleColor(element, 1);\n              }),\n            ]);\n            await Promise.all([\n              arrayB.forEach((element, index) => {\n                changeSingleColor(element, 3);\n              }),\n            ]);\n          }\n\n          //create new updated array\n          let resultMergeArray = sorted.concat(\n            arrayA.slice().concat(arrayB.slice())\n          );\n\n          let resultMergeReturn = dataArray\n            .slice(0, indexA)\n            .concat(resultMergeArray)\n            .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n          //   self.setState({\n          //     resultArray: resultMergeReturn,\n          //   });\n          props.updateGraph(resultMergeReturn);\n\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            sorted.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n          ]);\n\n          return resultMergeArray;\n        } else {\n          return;\n        }\n      }\n\n      //   let dataArray = self.state.resultArray;\n      let dataArray = [...props.resultArray];\n      dataArray = await mergeSortAlgorithm(dataArray);\n\n      //update all bar colors to green at end\n      await Promise.all([\n        dataArray.forEach((element, index) => {\n          changeColors(index, 2);\n        }),\n      ]);\n      //   self.setState({\n      //     // onSort: false,\n      //     buttonColor: '#fff',\n      //   });\n      props.setOnSort(false);\n      props.setButtonColor('#fff');\n    }\n  };\n\n  return (\n    <div>\n      <button\n        onClick={startMergeSort}\n        // onClick={\n        //   () => startBubbleSort\n        //   props.updateGraph([\n        //     ['Javascript', 17.16, 0, 0, 5],\n        //     ['PHP', 2.44, 0, 0, 6],\n        //     ['Java', 17.56, 0, 0, 7],\n        //     ['C#', 8.22, 0, 0, 8],\n        //     ['Typescript', 0.2, 0, 0, 0],\n        //     ['Ruby', 1.52, 0, 0, 1],\n        //     ['Python', 27.21, 0, 0, 2],\n        //     ['C++', 22.84, 0, 0, 3],\n        //     ['Golang', 0.4, 0, 0, 9],\n        //     ['Swift', 2.34, 0, 0, 4],\n        //   ])\n        // }\n        className='sortingAlgorithm'\n        style={{ color: props.mergeColor }}\n      >\n        Merge Sort\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    onSort: state.onSort,\n    bubbleColor: state.bubbleColor,\n    quickColor: state.quickColor,\n    mergeColor: state.mergeColor,\n    // cityLocation: state.cityLocation,\n    // stateLocation: state.stateLocation,\n    // message: state.message,\n    // loading: state.jobData.loading,\n    // jobData: state.jobData.jobData,\n    // error: state.jobData.error,\n    locationSubmitted: state.jobData.locationSubmitted,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setOnSort,\n  setBubbleColor,\n  //   setQuickColor,\n  setMergeColor,\n  //   setCityLocation,\n  //   setStateLocation,\n  //   setMessage,\n  //   fetchJobData,\n  setButtonColor,\n})(MergeSort);\n\n// export default BubbleSort;\n",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":20,"column":8,"nodeType":"109","messageId":"110","endLine":20,"endColumn":16},{"ruleId":"107","severity":1,"message":"111","line":22,"column":8,"nodeType":"109","messageId":"110","endLine":22,"endColumn":18},{"ruleId":"107","severity":1,"message":"112","line":23,"column":8,"nodeType":"109","messageId":"110","endLine":23,"endColumn":17},{"ruleId":"107","severity":1,"message":"113","line":99,"column":9,"nodeType":"109","messageId":"110","endLine":99,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":7,"column":1,"nodeType":"116","endLine":52,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":9,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"114","severity":1,"message":"115","line":1,"column":1,"nodeType":"116","endLine":8,"endColumn":3},{"ruleId":"107","severity":1,"message":"113","line":39,"column":11,"nodeType":"109","messageId":"110","endLine":39,"endColumn":15},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Controls' is defined but never used.","Identifier","unusedVar","'BubbleSort' is defined but never used.","'MergeSort' is defined but never used.","'self' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]