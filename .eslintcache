[{"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js":"1","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js":"2","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js":"3","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js":"4","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js":"5","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js":"6","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js":"7","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js":"8","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js":"9","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js":"10","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js":"11","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js":"12","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/api/jobData.js":"13","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/cityLocationReducer.js":"14","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/stateLocationReducer.js":"15","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Controls.js":"16","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/InfoControls.js":"17","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BubbleSort.js":"18","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/MergeSort.js":"19","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/resultArrayReducer.js":"20"},{"size":431,"mtime":1607558849000,"results":"21","hashOfConfig":"22"},{"size":25591,"mtime":1607560429000,"results":"23","hashOfConfig":"22"},{"size":989,"mtime":1607560326000,"results":"24","hashOfConfig":"22"},{"size":1017,"mtime":1607559327000,"results":"25","hashOfConfig":"22"},{"size":411,"mtime":1607242316000,"results":"26","hashOfConfig":"22"},{"size":1588,"mtime":1607560532000,"results":"27","hashOfConfig":"22"},{"size":159,"mtime":1607243884000,"results":"28","hashOfConfig":"22"},{"size":1798,"mtime":1607560415000,"results":"29","hashOfConfig":"22"},{"size":160,"mtime":1607322260000,"results":"30","hashOfConfig":"22"},{"size":159,"mtime":1607324962000,"results":"31","hashOfConfig":"22"},{"size":159,"mtime":1607485055000,"results":"32","hashOfConfig":"22"},{"size":169,"mtime":1607393865000,"results":"33","hashOfConfig":"22"},{"size":124,"mtime":1607393013000,"results":"34","hashOfConfig":"22"},{"size":161,"mtime":1607393857000,"results":"35","hashOfConfig":"22"},{"size":162,"mtime":1607393927000,"results":"36","hashOfConfig":"22"},{"size":107,"mtime":1607486571000,"results":"37","hashOfConfig":"22"},{"size":493,"mtime":1607487718000,"results":"38","hashOfConfig":"22"},{"size":5727,"mtime":1607560361000,"results":"39","hashOfConfig":"22"},{"size":7777,"mtime":1607493754000,"results":"40","hashOfConfig":"22"},{"size":1012,"mtime":1607499811000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x9v8x",{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"47"},"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/App.js",["94","95","96","97","98"],"import React from 'react';\n// import axios from 'axios';\nimport './index.css';\n\nimport { connect } from 'react-redux';\nimport {\n  setOnSort,\n  setBubbleColor,\n  setQuickColor,\n  setMergeColor,\n  setCityLocation,\n  setStateLocation,\n  setMessage,\n  fetchJobData,\n  // setResultArray,\n  setButtonColor,\n} from '../actions';\nimport Loading from './Loading';\nimport BarGraph from './BarGraph';\nimport Controls from './Controls';\nimport InfoControls from './InfoControls';\nimport BubbleSort from './BubbleSort';\nimport MergeSort from './MergeSort';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.updateGraph = this.updateGraph.bind(this);\n    this.state = {\n      // city: '',\n      // state: '',\n      resultArrayOriginal: [],\n      resultArray: [],\n      // bubbleColor: '',\n      // quickColor: '',\n      // mergeColor: '',\n      // onSort: false,\n      buttonColor: '',\n      // loading: false,\n      // locationSubmitted: false,\n      initialData: false,\n      // message: 'Please enter location',\n      // error: false,\n    };\n  }\n\n  resetSort = e => {\n    let self = this;\n    console.log('on sort reset');\n    // if (this.state.onSort === false) {\n    if (this.props.onSort === false && this.props.locationSubmitted === true) {\n      const resultArrayCopy = [\n        ['Typescript', 0.2, 0, 0, 0],\n        ['Ruby', 1.52, 0, 0, 1],\n        ['Python', 27.21, 0, 0, 2],\n        ['C++', 22.84, 0, 0, 3],\n        ['Golang', 0.4, 0, 0, 9],\n        ['Swift', 2.34, 0, 0, 4],\n        ['Javascript', 17.16, 0, 0, 5],\n        ['PHP', 2.44, 0, 0, 6],\n        ['Java', 17.56, 0, 0, 7],\n        ['C#', 8.22, 0, 0, 8],\n      ];\n      // [...this.props.jobData];\n      // JSON.parse(\n      //   JSON.stringify(self.state.resultArrayOriginal)\n      // );\n      console.log(resultArrayCopy);\n      self.setState({\n        resultArray: resultArrayCopy,\n\n        // bubbleColor: '',\n        // quickColor: '',\n        // mergeColor: '',\n      });\n\n      this.props.setBubbleColor('');\n      this.props.setQuickColor('');\n      this.props.setMergeColor('');\n    }\n  };\n\n  onCityInputChange = e => {\n    this.props.setCityLocation(e.target.value);\n\n    // this.setState({\n    //   [e.target.name]: e.target.value,\n    // });\n  };\n\n  onStateInputChange = e => {\n    this.props.setStateLocation(e.target.value);\n    // this.setState({\n    // [e.target.name]: e.target.value,\n    // });\n  };\n\n  onSubmit = e => {\n    let self = this;\n    e.preventDefault();\n    // var self = this;\n    // if (this.state.onSort === false) {\n    if (this.props.onSort === false) {\n      // let resultArrayFetch = [];\n      let city = this.props.cityLocation;\n      let state = this.props.stateLocation;\n\n      if (city && state) {\n        console.log('in here');\n        city = city.replace(' ', '+');\n        // console.log(\"city: \" + city + \"State:\" + state);\n        this.props.setMergeColor('');\n        this.props.setBubbleColor('');\n        this.props.setQuickColor('');\n\n        const fetchData = async () => {\n          await this.props.fetchJobData(city, state);\n          console.log('now');\n        };\n        fetchData();\n        this.setState({\n          resultArray: [\n            ['Typescript', 0.2, 0, 0, 0],\n            ['Ruby', 1.52, 0, 0, 1],\n            ['Python', 27.21, 0, 0, 2],\n            ['C++', 22.84, 0, 0, 3],\n            ['Golang', 0.4, 0, 0, 9],\n            ['Swift', 2.34, 0, 0, 4],\n            ['Javascript', 17.16, 0, 0, 5],\n            ['PHP', 2.44, 0, 0, 6],\n            ['Java', 17.56, 0, 0, 7],\n            ['C#', 8.22, 0, 0, 8],\n          ],\n        });\n      }\n    }\n  };\n\n  bubbleSort = () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      // this.setState({\n      //   // bubbleColor: '#f08a5d',\n      //   // onSort: true,\n      //   buttonColor: '#00587a',\n      // });\n      this.props.setBubbleColor('#f08a5d');\n      this.props.setOnSort(true);\n      this.props.setButtonColor('#00587a');\n\n      console.log('on bubblesort');\n\n      let self = this;\n      let count = 0;\n      let round = 0;\n      //flag indicates whether a bar has been swapped during this round\n\n      let flag = true;\n      let endFlag = false;\n\n      let myInterval = setInterval(() => {\n        // if (count === 0) {\n        // }\n        function swap(input, indexA, indexB) {\n          flag = false;\n          let temp = input[indexA];\n          input[indexA] = input[indexB];\n          input[indexB] = temp;\n          return input;\n        }\n\n        if (endFlag === true || count === 9) {\n          // let dataArray = self.state.resultArray;\n          let dataArray = [...this.props.resultArray];\n          if (dataArray[8][1] > dataArray[9][1]) {\n            swap(dataArray, 8, 9);\n            // self.setState({\n            //   resultArray: dataArray,\n            // });\n          }\n\n          if (round < 9) {\n            dataArray[9 - round][3] = 2;\n            dataArray[9 - round - 1][3] = 0;\n          } else {\n            dataArray[9 - round][3] = 2;\n          }\n\n          self.setState({\n            resultArray: dataArray,\n          });\n          round++;\n          //if at the end of the array and no swaps, all items are sorted\n          if (flag === true) {\n            let dataArray = self.state.resultArray;\n            //Update each bar color to green\n            dataArray.forEach(element => {\n              element[3] = 2;\n            });\n            self.setState({\n              resultArray: dataArray,\n              // onSort: false,\n              buttonColor: '#fff',\n            });\n            this.props.setOnSort(false);\n            clearInterval(myInterval);\n          } else {\n            count = 0;\n            flag = true;\n          }\n          endFlag = false;\n          return;\n        } else {\n          let dataArray = self.state.resultArray;\n          if (count === 0) {\n            //if first count, have to color first two yellow\n            dataArray[0][3] = 1;\n            dataArray[1][3] = 1;\n            self.setState({\n              resultArray: dataArray,\n            });\n            count++;\n          } else {\n            if (dataArray[count - 1][1] > dataArray[count][1]) {\n              swap(dataArray, count - 1, count);\n              self.setState({\n                resultArray: dataArray,\n              });\n            } else {\n              if (dataArray[count + 1][3] !== 2) {\n                //if the next one isn't green/already sorted, continue\n                dataArray[count - 1][3] = 0;\n                dataArray[count + 1][3] = 1;\n                self.setState({\n                  resultArray: dataArray,\n                });\n              } else if (dataArray[count + 1][3] === 2) {\n                endFlag = true;\n              }\n              count++;\n            }\n          }\n        }\n      }, 140);\n    }\n  };\n\n  // bubbleSort = () => {\n  //   if (\n  //     this.props.bubbleColor === '' &&\n  //     // this.state.bubbleColor === '' &&\n  //     this.props.quickColor === '' &&\n  //     // this.state.quickColor === '' &&\n  //     // this.state.mergeColor === '' &&\n  //     this.props.mergeColor === '' &&\n  //     this.props.onSort === false &&\n  //     this.props.locationSubmitted === true\n  //   ) {\n  //     this.setState({\n  //       // bubbleColor: '#f08a5d',\n  //       // onSort: true,\n  //       buttonColor: '#00587a',\n  //     });\n  //     this.props.setBubbleColor('#f08a5d');\n  //     this.props.setOnSort(true);\n\n  //     console.log('on bubblesort');\n\n  //     let self = this;\n  //     let count = 0;\n  //     let round = 0;\n  //     //flag indicates whether a bar has been swapped during this round\n\n  //     let flag = true;\n  //     let endFlag = false;\n\n  //     let myInterval = setInterval(() => {\n  //       if (count === 0) {\n  //       }\n  //       function swap(input, indexA, indexB) {\n  //         flag = false;\n  //         let temp = input[indexA];\n  //         input[indexA] = input[indexB];\n  //         input[indexB] = temp;\n  //         return input;\n  //       }\n\n  //       if (endFlag === true || count === 9) {\n  //         let dataArray = self.state.resultArray;\n  //         if (dataArray[8][1] > dataArray[9][1]) {\n  //           swap(dataArray, 8, 9);\n  //           self.setState({\n  //             resultArray: dataArray,\n  //           });\n  //         }\n\n  //         if (round < 9) {\n  //           dataArray[9 - round][3] = 2;\n  //           dataArray[9 - round - 1][3] = 0;\n  //         } else {\n  //           dataArray[9 - round][3] = 2;\n  //         }\n\n  //         self.setState({\n  //           resultArray: dataArray,\n  //         });\n  //         round++;\n  //         //if at the end of the array and no swaps, all items are sorted\n  //         if (flag === true) {\n  //           let dataArray = self.state.resultArray;\n  //           //Update each bar color to green\n  //           dataArray.forEach(element => {\n  //             element[3] = 2;\n  //           });\n  //           self.setState({\n  //             resultArray: dataArray,\n  //             // onSort: false,\n  //             buttonColor: '#fff',\n  //           });\n  //           this.props.setOnSort(false);\n  //           clearInterval(myInterval);\n  //         } else {\n  //           count = 0;\n  //           flag = true;\n  //         }\n  //         endFlag = false;\n  //         return;\n  //       } else {\n  //         let dataArray = self.state.resultArray;\n  //         if (count === 0) {\n  //           //if first count, have to color first two yellow\n  //           dataArray[0][3] = 1;\n  //           dataArray[1][3] = 1;\n  //           self.setState({\n  //             resultArray: dataArray,\n  //           });\n  //           count++;\n  //         } else {\n  //           if (dataArray[count - 1][1] > dataArray[count][1]) {\n  //             swap(dataArray, count - 1, count);\n  //             self.setState({\n  //               resultArray: dataArray,\n  //             });\n  //           } else {\n  //             if (dataArray[count + 1][3] !== 2) {\n  //               //if the next one isn't green/already sorted, continue\n  //               dataArray[count - 1][3] = 0;\n  //               dataArray[count + 1][3] = 1;\n  //               self.setState({\n  //                 resultArray: dataArray,\n  //               });\n  //             } else if (dataArray[count + 1][3] === 2) {\n  //               endFlag = true;\n  //             }\n  //             count++;\n  //           }\n  //         }\n  //       }\n  //     }, 140);\n  //   }\n  // };\n\n  quickSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      this.setState({\n        // quickColor: '#f08a5d',\n        // onSort: true,\n        buttonColor: '#00587a',\n      });\n      this.props.setQuickColor('#f08a5d');\n      this.props.setOnSort(true);\n      console.log('on quicksort');\n\n      let self = this;\n\n      //https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function swap(input, indexA, indexB) {\n        await sleep(170);\n        let temp = input[indexA];\n        input[indexA] = input[indexB];\n        input[indexB] = temp;\n\n        return input;\n      }\n\n      //changeColors function, enter index to change color and number of color\n      //updates state with the new bar colors\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][3] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      //resets the color of the bar to blue, updates state\n      async function resetColor(endIndex) {\n        let dataArray = self.state.resultArray;\n        dataArray[endIndex][3] = 0;\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(0.1);\n      }\n\n      async function getPivotIndex(array, startIndex, endIndex) {\n        let pivotValue = array[endIndex][1];\n\n        let pivotIndex = startIndex;\n        await changeColors(endIndex, 3);\n\n        for (let i = startIndex; i < endIndex; i++) {\n          let startPivotIndex = pivotIndex;\n\n          //changes bar colors\n          await Promise.all([changeColors(i, 2), changeColors(pivotIndex, 1)]);\n\n          if (array[i][1] < pivotValue) {\n            if (i === pivotIndex) {\n              //if on first index, reset the color and increase pivot index\n\n              await resetColor(i);\n              pivotIndex++;\n            } else {\n              //change colors if not on the first index\n              //change to red\n\n              await Promise.all([\n                changeColors(i, 4),\n                changeColors(pivotIndex, 4),\n              ]);\n              await swap(array, i, pivotIndex);\n\n              //after swap, update colors\n              await Promise.all([\n                changeColors(i, 2),\n                changeColors(pivotIndex, 2),\n              ]);\n\n              //reset the colors after and increase pivot index\n              await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n              pivotIndex++;\n            }\n          }\n\n          //reset colors before returning pivot index\n          if (startPivotIndex !== pivotIndex) {\n            await Promise.all([resetColor(i), resetColor(pivotIndex)]);\n          } else {\n            await resetColor(i);\n          }\n        }\n\n        if (pivotIndex !== endIndex) {\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await swap(array, pivotIndex, endIndex);\n          await Promise.all([\n            changeColors(pivotIndex, 4),\n            changeColors(endIndex, 4),\n          ]);\n          await Promise.all([resetColor(pivotIndex), resetColor(endIndex)]);\n        }\n\n        //return the pivot index\n        return pivotIndex;\n      }\n\n      async function quickSortAlgorithm(array, startingIndex, endingIndex) {\n        if (startingIndex > endingIndex) {\n          return;\n        } else {\n          let index = await getPivotIndex(array, startingIndex, endingIndex);\n\n          await Promise.all([\n            quickSortAlgorithm(array, startingIndex, index - 1),\n            quickSortAlgorithm(array, index + 1, endingIndex),\n          ]);\n        }\n      }\n\n      let dataArray = this.state.resultArray;\n      await quickSortAlgorithm(dataArray, 0, 9).then(async () => {\n        //pause, and then change colors to green\n        setTimeout(() => {\n          dataArray.forEach((bar, barIndex) => {\n            bar[3] = 2;\n          });\n          self.setState({\n            resultArray: dataArray,\n            // onSort: false,\n            buttonColor: '#fff',\n          });\n          this.props.setOnSort(false);\n        }, 170);\n      });\n    }\n  };\n\n  mergeSort = async () => {\n    if (\n      this.props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      // this.state.quickColor === '' &&\n      this.props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      this.props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      this.props.onSort === false &&\n      this.props.locationSubmitted === true\n    ) {\n      this.setState({\n        // mergeColor: '#f08a5d',\n        // onSort: true,\n        buttonColor: '#00587a',\n      });\n      this.props.setOnSort(true);\n      this.props.setMergeColor('#f08a5d');\n      console.log('on mergesort');\n\n      let self = this;\n\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function changeColors(index, number) {\n        let dataArray = self.state.resultArray;\n        dataArray[index][3] = number;\n        self.setState({\n          resultArray: dataArray,\n        });\n        await sleep(170);\n      }\n\n      async function changeSingleColor(item, number) {\n        let dataArray = self.state.resultArray;\n\n        //find where the item is in dataArray\n        let index = dataArray.indexOf(item);\n        dataArray[index][3] = number;\n\n        self.setState({\n          resultArray: dataArray,\n        });\n\n        await sleep(170);\n      }\n\n      async function mergeSortAlgorithm(array) {\n        if (array.length <= 1) {\n          return array;\n        }\n\n        let middlePoint = Math.floor(array.length / 2),\n          leftArray = await mergeSortAlgorithm(array.slice(0, middlePoint)),\n          rightArray = await mergeSortAlgorithm(array.slice(middlePoint));\n\n        let mergeResult = await merge(leftArray, rightArray);\n\n        return mergeResult;\n      }\n\n      async function merge(arrayA, arrayB) {\n        if (arrayA.length > 0 && arrayB.length > 0) {\n          let arrayAIndex = arrayA[0][0];\n          let lengthTotal = arrayA.length + arrayB.length;\n          let sorted = [];\n          let dataArray = self.state.resultArray;\n          let dataArrayCopy = dataArray;\n          let indexA = 0;\n\n          //identify first where we are in dataArray, set it to be indexA\n          dataArray.forEach((element, index) => {\n            if (element[0] === arrayAIndex) {\n              indexA = index;\n              return;\n            }\n          });\n\n          //change the color of arrays so we can identify the left from right\n          //arrayA = yellow, arrayB = purple\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 1);\n            }),\n          ]);\n          await Promise.all([\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 3);\n            }),\n          ]);\n\n          await sleep(370);\n          while (arrayA.length && arrayB.length) {\n            let dataArray = self.state.resultArray;\n            let dataArrayCopy = dataArray;\n\n            await Promise.all([\n              changeSingleColor(arrayA[0], 4),\n              changeSingleColor(arrayB[0], 4),\n            ]);\n\n            if (arrayA[0][1] < arrayB[0][1]) {\n              sorted.push(arrayA.shift());\n            } else {\n              sorted.push(arrayB.shift());\n            }\n\n            let resultMergeArray = sorted.concat(\n              arrayA.slice().concat(arrayB.slice())\n            );\n\n            //merge the sorte with the entire dataArray\n            let resultMergeReturn = dataArray\n              .slice(0, indexA)\n              .concat(resultMergeArray)\n              .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n\n            self.setState({\n              resultArray: resultMergeReturn,\n            });\n\n            //change colors for the next loop\n\n            await Promise.all([\n              arrayA.forEach((element, index) => {\n                changeSingleColor(element, 1);\n              }),\n            ]);\n            await Promise.all([\n              arrayB.forEach((element, index) => {\n                changeSingleColor(element, 3);\n              }),\n            ]);\n          }\n\n          //create new updated array\n          let resultMergeArray = sorted.concat(\n            arrayA.slice().concat(arrayB.slice())\n          );\n\n          let resultMergeReturn = dataArray\n            .slice(0, indexA)\n            .concat(resultMergeArray)\n            .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n          self.setState({\n            resultArray: resultMergeReturn,\n          });\n\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            sorted.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n          ]);\n\n          return resultMergeArray;\n        } else {\n          return;\n        }\n      }\n\n      let dataArray = self.state.resultArray;\n      dataArray = await mergeSortAlgorithm(dataArray);\n\n      //update all bar colors to green at end\n      await Promise.all([\n        dataArray.forEach((element, index) => {\n          changeColors(index, 2);\n        }),\n      ]);\n      self.setState({\n        // onSort: false,\n        buttonColor: '#fff',\n      });\n      this.props.setOnSort(false);\n    }\n  };\n\n  updateGraph = arr => {\n    console.log('Before' + this.state.resultArray);\n    console.log('updategraph');\n    this.setState({\n      resultArray: arr,\n    });\n\n    console.log('after' + this.state.resultArray);\n  };\n\n  render() {\n    console.log('RERENDERED');\n    console.log(this.props.loading);\n    const { city, state } = this.state;\n    var self = this;\n    return (\n      <div className='container'>\n        <div className='controls-container'>\n          <div className='controls'>\n            <InfoControls />\n\n            <div>\n              <div>\n                <h2>Location</h2>\n              </div>\n\n              <form onSubmit={this.onSubmit}>\n                <div className='location-container'>\n                  <div>\n                    <label>City:</label>\n\n                    <input\n                      type='text'\n                      name='city'\n                      className='input-text'\n                      value={city}\n                      onChange={this.onCityInputChange}\n                    />\n                  </div>\n\n                  {/* <br /> */}\n                  <div>\n                    <label>State:</label>\n\n                    <input\n                      type='text'\n                      name='state'\n                      className='input-text'\n                      value={state}\n                      onChange={this.onStateInputChange}\n                    />\n                  </div>\n\n                  <div>\n                    <div className='buttonHolder'>\n                      <button\n                        className='btn'\n                        style={{ color: this.state.buttonColor }}\n                      >\n                        Submit Location\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n\n            <div className='algorithms-container'>\n              <div>\n                <h2>Sorting Algorithm</h2>\n              </div>\n              <div>\n                <button\n                  onClick={self.bubbleSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.bubbleColor }}\n                >\n                  Bubble Sort\n                </button>\n                {/* <BubbleSort\n                  updateGraph={this.updateGraph}\n                  resultArray={this.state.resultArray}\n                /> */}\n              </div>\n\n              <div>\n                <button\n                  onClick={self.quickSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.quickColor }}\n                >\n                  Quick Sort\n                </button>\n              </div>\n\n              <div>\n                {/* <MergeSort\n                  updateGraph={this.updateGraph}\n                  resultArray={this.state.resultArray}\n                /> */}\n                <button\n                  onClick={self.mergeSort}\n                  className='sortingAlgorithm'\n                  style={{ color: this.props.mergeColor }}\n                >\n                  Merge Sort\n                </button>\n              </div>\n\n              <div className='buttonHolder'>\n                <button\n                  className='btn'\n                  style={{ color: this.state.buttonColor }}\n                  onClick={self.resetSort}\n                >\n                  Reset Sort\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className='barGraph-container'>\n          {this.props.locationSubmitted === false ||\n          this.props.error === true ||\n          (this.state.initialData === true && this.state.loading === true) ? (\n            <Loading\n              loading={this.props.loading}\n              message={this.props.message}\n            />\n          ) : (\n            <BarGraph resultArray={this.props.resultArray} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    onSort: state.onSort,\n    bubbleColor: state.bubbleColor,\n    quickColor: state.quickColor,\n    mergeColor: state.mergeColor,\n    cityLocation: state.cityLocation,\n    stateLocation: state.stateLocation,\n    message: state.message,\n    loading: state.jobData.loading,\n    jobDataCopy: state.jobData.jobDataCopy,\n    error: state.jobData.error,\n    locationSubmitted: state.jobData.locationSubmitted,\n    resultArray: state.jobData.resultArray,\n  };\n};\n// ReactDOM.render(<App />, document.querySelector('#root'));\n\nexport default connect(mapStateToProps, {\n  setOnSort,\n  setBubbleColor,\n  setMergeColor,\n  setQuickColor,\n  setCityLocation,\n  setStateLocation,\n  setMessage,\n  fetchJobData,\n  // setResultArray,\n})(App);\n",["99","100"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/index.js",["101"],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BarGraph.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Loading.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/fetchJobDataReducer.js",["102","103"],"const initialState = {\n  jobDataCopy: [],\n  resultArray: [],\n  loading: false,\n  error: false,\n  locationSubmitted: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'TOGGLE_LOADING':\n      return {\n        ...state,\n        loading: !state.loading,\n      };\n    case 'STORE_VALUE':\n      if (state.locationSubmitted === false) {\n        let response = { ...action.payload };\n\n        let totalNumberOfJobs = 0;\n        let resultArrayFetch = [];\n\n        Object.values(response).forEach(function(value) {\n          totalNumberOfJobs += value;\n        });\n\n        for (const [key, value] of Object.entries(response)) {\n          let keyResult = key;\n          let percentage = ((value / totalNumberOfJobs) * 100).toFixed(2);\n          resultArrayFetch.push([keyResult, percentage]);\n        }\n\n        resultArrayFetch.forEach((element, index) => {\n          let percent = element[1];\n          element[1] = parseFloat(percent);\n\n          element.push(0);\n        });\n        const resultArrayCopy = JSON.parse(JSON.stringify(resultArrayFetch));\n\n        return {\n          jobDataCopy: [...resultArrayCopy],\n          resultArray: [...resultArrayCopy],\n          loading: false,\n          error: false,\n          locationSubmitted: true,\n        };\n      } else if (state.locationSubmitted === true) {\n        return {\n          ...state,\n          resultArray: action.payload,\n        };\n      }\n\n    case 'ERROR_FETCHING':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n        locationSubmitted: false,\n      };\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/onSortReducer.js",["104"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'ON_SORT':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/actions/index.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/bubbleColorReducer.js",["105"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'BUBBLE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/quickColorReducer.js",["106"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'QUICK_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/mergeColorReducer.js",["107"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'MERGE_COLOR':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/locationSubmittedReducer.js",["108"],"export default (state = false, action) => {\n  switch (action.type) {\n    case 'LOCATION_SUBMITTED':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/api/jobData.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/cityLocationReducer.js",["109"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'CITY_LOCATION':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/stateLocationReducer.js",["110"],"export default (state = '', action) => {\n  switch (action.type) {\n    case 'STATE_LOCATION':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/Controls.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/InfoControls.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/BubbleSort.js",[],"/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/components/MergeSort.js",["111"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  setOnSort,\n  setBubbleColor,\n  //   setQuickColor,\n  setMergeColor,\n  //   setCityLocation,\n  //   setStateLocation,\n  //   setMessage,\n  //   fetchJobData,\n  setButtonColor,\n} from '../actions';\n\nconst MergeSort = props => {\n  const startMergeSort = async () => {\n    if (\n      props.bubbleColor === '' &&\n      // this.state.bubbleColor === '' &&\n      // this.state.quickColor === '' &&\n      props.quickColor === '' &&\n      // this.state.mergeColor === '' &&\n      props.mergeColor === '' &&\n      // this.state.onSort === false &&\n      props.onSort === false &&\n      props.locationSubmitted === true\n    ) {\n      //   this.setState({\n      //     // mergeColor: '#f08a5d',\n      //     // onSort: true,\n      //     buttonColor: '#00587a',\n      //   });\n      props.setOnSort(true);\n      props.setMergeColor('#f08a5d');\n      props.setButtonColor('#00587a');\n      console.log('on mergesort');\n\n      let self = this;\n\n      function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n\n      async function changeColors(index, number) {\n        // let dataArray = self.state.resultArray;\n        let dataArray = [...props.resultArray];\n        dataArray[index][3] = number;\n        // self.setState({\n        //   resultArray: dataArray,\n        // });\n        props.updateGraph(dataArray);\n        await sleep(170);\n      }\n\n      async function changeSingleColor(item, number) {\n        // let dataArray = self.state.resultArray;\n        let dataArray = [...props.resultArray];\n        //find where the item is in dataArray\n        let index = dataArray.indexOf(item);\n        dataArray[index][3] = number;\n\n        // self.setState({\n        //   resultArray: dataArray,\n        // });\n\n        props.updateGraph(dataArray);\n        await sleep(170);\n      }\n\n      async function mergeSortAlgorithm(array) {\n        if (array.length <= 1) {\n          return array;\n        }\n\n        let middlePoint = Math.floor(array.length / 2),\n          leftArray = await mergeSortAlgorithm(array.slice(0, middlePoint)),\n          rightArray = await mergeSortAlgorithm(array.slice(middlePoint));\n\n        let mergeResult = await merge(leftArray, rightArray);\n\n        return mergeResult;\n      }\n\n      async function merge(arrayA, arrayB) {\n        if (arrayA.length > 0 && arrayB.length > 0) {\n          let arrayAIndex = arrayA[0][0];\n          let lengthTotal = arrayA.length + arrayB.length;\n          let sorted = [];\n          //   let dataArray = self.state.resultArray;\n          let dataArray = [...props.resultArray];\n          let dataArrayCopy = [...dataArray];\n          let indexA = 0;\n\n          //identify first where we are in dataArray, set it to be indexA\n          dataArray.forEach((element, index) => {\n            if (element[0] === arrayAIndex) {\n              indexA = index;\n              return;\n            }\n          });\n\n          //change the color of arrays so we can identify the left from right\n          //arrayA = yellow, arrayB = purple\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 1);\n            }),\n          ]);\n          await Promise.all([\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 3);\n            }),\n          ]);\n\n          await sleep(370);\n          while (arrayA.length && arrayB.length) {\n            // let dataArray = self.state.resultArray;\n            let dataArray = [...props.resultArray];\n            let dataArrayCopy = dataArray;\n\n            await Promise.all([\n              changeSingleColor(arrayA[0], 4),\n              changeSingleColor(arrayB[0], 4),\n            ]);\n\n            if (arrayA[0][1] < arrayB[0][1]) {\n              sorted.push(arrayA.shift());\n            } else {\n              sorted.push(arrayB.shift());\n            }\n\n            let resultMergeArray = sorted.concat(\n              arrayA.slice().concat(arrayB.slice())\n            );\n\n            //merge the sorte with the entire dataArray\n            let resultMergeReturn = dataArray\n              .slice(0, indexA)\n              .concat(resultMergeArray)\n              .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n\n            // self.setState({\n            //   resultArray: resultMergeReturn,\n            // });\n\n            props.updateGraph(resultMergeReturn);\n            //change colors for the next loop\n\n            await Promise.all([\n              arrayA.forEach((element, index) => {\n                changeSingleColor(element, 1);\n              }),\n            ]);\n            await Promise.all([\n              arrayB.forEach((element, index) => {\n                changeSingleColor(element, 3);\n              }),\n            ]);\n          }\n\n          //create new updated array\n          let resultMergeArray = sorted.concat(\n            arrayA.slice().concat(arrayB.slice())\n          );\n\n          let resultMergeReturn = dataArray\n            .slice(0, indexA)\n            .concat(resultMergeArray)\n            .concat(dataArrayCopy.slice(lengthTotal + indexA, 10));\n          //   self.setState({\n          //     resultArray: resultMergeReturn,\n          //   });\n          props.updateGraph(resultMergeReturn);\n\n          await Promise.all([\n            arrayA.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            arrayB.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n            sorted.forEach((element, index) => {\n              changeSingleColor(element, 0);\n            }),\n          ]);\n\n          return resultMergeArray;\n        } else {\n          return;\n        }\n      }\n\n      //   let dataArray = self.state.resultArray;\n      let dataArray = [...props.resultArray];\n      dataArray = await mergeSortAlgorithm(dataArray);\n\n      //update all bar colors to green at end\n      await Promise.all([\n        dataArray.forEach((element, index) => {\n          changeColors(index, 2);\n        }),\n      ]);\n      //   self.setState({\n      //     // onSort: false,\n      //     buttonColor: '#fff',\n      //   });\n      props.setOnSort(false);\n      props.setButtonColor('#fff');\n    }\n  };\n\n  return (\n    <div>\n      <button\n        onClick={startMergeSort}\n        // onClick={\n        //   () => startBubbleSort\n        //   props.updateGraph([\n        //     ['Javascript', 17.16, 0, 0, 5],\n        //     ['PHP', 2.44, 0, 0, 6],\n        //     ['Java', 17.56, 0, 0, 7],\n        //     ['C#', 8.22, 0, 0, 8],\n        //     ['Typescript', 0.2, 0, 0, 0],\n        //     ['Ruby', 1.52, 0, 0, 1],\n        //     ['Python', 27.21, 0, 0, 2],\n        //     ['C++', 22.84, 0, 0, 3],\n        //     ['Golang', 0.4, 0, 0, 9],\n        //     ['Swift', 2.34, 0, 0, 4],\n        //   ])\n        // }\n        className='sortingAlgorithm'\n        style={{ color: props.mergeColor }}\n      >\n        Merge Sort\n      </button>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    onSort: state.onSort,\n    bubbleColor: state.bubbleColor,\n    quickColor: state.quickColor,\n    mergeColor: state.mergeColor,\n    // cityLocation: state.cityLocation,\n    // stateLocation: state.stateLocation,\n    // message: state.message,\n    // loading: state.jobData.loading,\n    // jobData: state.jobData.jobData,\n    // error: state.jobData.error,\n    locationSubmitted: state.jobData.locationSubmitted,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setOnSort,\n  setBubbleColor,\n  //   setQuickColor,\n  setMergeColor,\n  //   setCityLocation,\n  //   setStateLocation,\n  //   setMessage,\n  //   fetchJobData,\n  setButtonColor,\n})(MergeSort);\n\n// export default BubbleSort;\n","/Users/emilylin/Desktop/projects/project2/data_frontend_redux_new_12_06/src/reducers/resultArrayReducer.js",["112"],"export default (state = null, action) => {\n  switch (action.type) {\n    case 'COPY_VALUE':\n      console.log('in result arr reducer + response');\n      let response = { ...action.payload };\n      console.log(response);\n      let totalNumberOfJobs = 0;\n      let resultArrayFetch = [];\n\n      Object.values(response).forEach(function(value) {\n        totalNumberOfJobs += value;\n      });\n\n      for (const [key, value] of Object.entries(response)) {\n        let keyResult = key;\n        let percentage = ((value / totalNumberOfJobs) * 100).toFixed(2);\n        resultArrayFetch.push([keyResult, percentage]);\n      }\n\n      resultArrayFetch.forEach((element, index) => {\n        let percent = element[1];\n        element[1] = parseFloat(percent);\n\n        element.push(0);\n      });\n      const resultArrayCopy = JSON.parse(JSON.stringify(resultArrayFetch));\n\n      console.log('arr copy' + resultArrayCopy);\n      return {\n        jobData: [...resultArrayCopy],\n      };\n\n    default:\n      return state;\n  }\n};\n",{"ruleId":"113","severity":1,"message":"114","line":16,"column":3,"nodeType":"115","messageId":"116","endLine":16,"endColumn":17},{"ruleId":"113","severity":1,"message":"117","line":20,"column":8,"nodeType":"115","messageId":"116","endLine":20,"endColumn":16},{"ruleId":"113","severity":1,"message":"118","line":22,"column":8,"nodeType":"115","messageId":"116","endLine":22,"endColumn":18},{"ruleId":"113","severity":1,"message":"119","line":23,"column":8,"nodeType":"115","messageId":"116","endLine":23,"endColumn":17},{"ruleId":"113","severity":1,"message":"120","line":99,"column":9,"nodeType":"115","messageId":"116","endLine":99,"endColumn":13},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"113","severity":1,"message":"125","line":11,"column":8,"nodeType":"115","messageId":"116","endLine":11,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":9,"column":1,"nodeType":"128","endLine":65,"endColumn":3},{"ruleId":"129","severity":1,"message":"130","line":55,"column":5,"nodeType":"131","messageId":"132","endLine":61,"endColumn":9},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":9,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":8,"endColumn":3},{"ruleId":"113","severity":1,"message":"120","line":39,"column":11,"nodeType":"115","messageId":"116","endLine":39,"endColumn":15},{"ruleId":"126","severity":1,"message":"127","line":1,"column":1,"nodeType":"128","endLine":36,"endColumn":3},"no-unused-vars","'setButtonColor' is defined but never used.","Identifier","unusedVar","'Controls' is defined but never used.","'BubbleSort' is defined but never used.","'MergeSort' is defined but never used.","'self' is assigned a value but never used.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'resultArrayReducer' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-global-assign","no-unsafe-negation"]